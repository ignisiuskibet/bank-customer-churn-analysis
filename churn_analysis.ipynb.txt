# 1. Introduction

# Bank Customer Churn Analysis & Prediction
# In this notebook, we analyze a dataset of bank customers to:
- Understand the key drivers of customer churn
 - Build a predictive model to identify customers at risk of leaving
 - Provide business recommendations to reduce churn

# 2. Import Libraries & Load Dataset

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load pre-cleaned dataset
df = pd.read_csv('cleaned_churn.csv')

# Display first few rows
df.head()


# 3. Exploratory Data Analysis (EDA)

# Churn distribution
sns.countplot(x='Exited', data=df)
plt.title('Churn Distribution')
plt.xlabel('Exited (1 = Churned)')
plt.ylabel('Number of Customers')
plt.show()

# Age vs Churn
sns.boxplot(x='Exited', y='Age', data=df)
plt.title('Age Distribution by Churn Status')
plt.show()

# Balance vs Churn
sns.boxplot(x='Exited', y='Balance', data=df)
plt.title('Balance vs Churn')
plt.show()

# Geography effect
sns.barplot(x='Geography_Germany', y='Exited', data=df)
plt.title('Churn Rate for Germany-Based Customers')
plt.show()



# 4. Prepare Data for Modeling

# Features and target
X = df.drop('Exited', axis=1)
y = df['Exited']

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42)

print(f"Training samples: {X_train.shape[0]}")
print(f"Test samples: {X_test.shape[0]}")

## 5. Train a Random Forest Model

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

## 6. Feature Importance

importances = model.feature_importances_
features = X.columns

# Plot feature importances
plt.figure(figsize=(10, 6))
sns.barplot(x=importances, y=features)
plt.title("Feature Importance for Churn Prediction")
plt.xlabel("Importance Score")
plt.ylabel("Feature")
plt.show()


## 7. Business Insights & Recommendations Key Insights:

- Customers from Germany are more likely to churn.
- Inactive members (`IsActiveMember = 0`) tend to churn more.
- Higher age is associated with increased churn risk.
- Customers with only 1 product are at higher risk.

## Recommendations:
1. Improve customer engagement for inactive users through personalized messaging.
2. Target German customers with region-specific support or incentives.
3. Offer bundling deals to customers with a single product.
4. Launch loyalty programs for senior customers to increase retention.


# 8. Conclusion

In this analysis, I did trained a Random Forest classifier that achieved 85.25% accuracy in predicting customer churn.

I provided actionable business recommendations that can help reduce churn and retain valuable customers by identifying key features such as geography, activity level and product usage.

This project showcases my skills in:
- Data cleaning & preprocessing
- Exploratory data analysis (EDA)
- Machine learning modeling (Random Forest)
- Business insight generation